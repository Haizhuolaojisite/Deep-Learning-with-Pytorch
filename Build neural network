Your input will be images of size (28, 28), so images containing 784 pixels. Your network will contain an input_layer (provided for you), 
a hidden layer with 200 units, and an output layer with 10 classes. 

The input layer has already been created for you. You are going to create the weights, and then do matrix multiplications, 
getting the results from the network.

# Initialize the weights of the neural network
weight_1 = torch.rand(784, 200)
weight_2 = torch.rand(200,10)

# Multiply input_layer with weight_1
hidden_1 = torch.matmul(input_layer, weight_1)

# Multiply hidden_1 with weight_2
output_layer = torch.matmul(hidden_1,weight_2)
print(output_layer)

<script.py> output:
    tensor([19789.5352, 19573.3125, 19487.0332, 20075.2402, 19955.4141, 18698.8359,
            20420.6113, 20627.8965, 19162.8379, 19688.7656])
===========================================================================
class Net(nn.Module):
    def __init__(self):
        super(Net, self).__init__()
        
        # Instantiate all 2 linear layers  
        self.fc1 = nn.Linear(784, 200)
        self.fc2 = nn.Linear(200,10)

    def forward(self, x):
      
        # Use the instantiated layers and return x
        x = self.fc1(x)
        x = self.fc2(x)
        return x
